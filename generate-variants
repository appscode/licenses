#!/usr/bin/env node
// Create the build directory and write all license variants
// to that directory.
var childProcess = require('child_process')
var fs = require('fs')
var mustache = require('mustache')
var path = require('path')

// Read the source Markdown file.
var source = fs.readFileSync('polyform.md', 'utf8')

// Create the build directory.
try {
  fs.mkdirSync('build')
} catch (error) {
  if (error.code !== 'EEXIST') throw error
}

// Determine version.
var version = 'Development Draft'
try {
  childProcess.execSync('git diff-index --quiet HEAD')
  var tag = childProcess.execSync(
    'git describe --exact-match --tags 2>/dev/null'
  )
  if (tag.startsWith('v')) {
    version = 'Version ' + tag.slice(1)
  }
} catch (error) {
  // pass
}
if (process.env.VERSION) version = process.env.VERSION

// Generate variants.
var variants = {
  'Internal': [ 'CL', 'IB' ],
  'Noncommercial': [ 'CL', 'DL' ],
  'Noncompete': [ 'CL', 'DL', 'NX' ],
  'Small': [ 'CL', 'DL', 'SB' ],
  'Strict': [],
  'Trial': [ 'CL', 'DL', 'FT' ]
}

Object.keys(variants).forEach(function (suffix) {
  var options = variants[suffix]
  if (options.includes('DL')) options.push('NO')
  var view = {
    URL: version.toLowerCase().includes('draft')
      ? 'https://github.com/polyformproject/polyform-licenses/'
      : 'https://polyformproject.org/licenses/' + suffix.toLowerCase() + '/' + version.trim(),
    TITLE: 'Polyform ' + suffix + ' License ' + version
  }
  options.forEach(function (code) { view[code] = true })
  var fileName = path.join(
    __dirname, 'build', 'Polyform-' + suffix + '.md'
  )
  // Render Mustache template.
  var lines = mustache.render(source, view)
    .split('\n')
    .filter(function (line) {
      return line.trim().length !== 0
    })
  var stream = fs.createWriteStream(fileName)
  writeVariant(lines, stream, suffix, options)
})

function writeVariant (lines, stream, suffix, options) {
  // Pipe through fmt -65 -u.
  var fmt = childProcess.spawn('fmt', ['-65', '-u'])
  fmt.stdout.pipe(stream)
  var input = fmt.stdin
  lines.forEach(function (line) {
    if (line.startsWith('# ')) {
      input.write(line)
    } else {
      input.write('\n\n' + line)
    }
  })
  input.end('\n')
}
